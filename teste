shared.stop = true
wait(1)
shared.stop = false

shared.nospacedelay = shared.nospacedelay or false

local str = shared.scr or "qw[er]ty"
local FinishTime = shared.ftime or 10

local vim = game:GetService("VirtualInputManager")

local nstr = string.gsub(str,"[[\]\n]","")

local delay = shared.tempo and (6 / shared.tempo) or shared.delay or FinishTime / (string.len(nstr) / 1.05)

print("Finishing in",math.floor((delay*#nstr)/60),"minute/s",tostring(tonumber(tostring((delay*#nstr)/60):sub(3,8))*60):sub(1,2),"second/s")

local shifting = false

local function doshift(key)
    if key:upper() ~= key then return end
    if tonumber(key) then return end
    
    vim:SendKeyEvent(true, 304, false, nil)
    shifting = true
end

local function endshift()
    if not shifting then return end

    vim:SendKeyEvent(false, 304, false, nil)
    shifting = false
end

-- Fonction pour envoyer plusieurs touches simultanément
local function sendSimultaneousKeys(keys)
    local keyCodes = {}
    
    -- Enregistrer les codes des touches
    for i = 1, #keys do
        local key = keys:sub(i, i):lower()
        table.insert(keyCodes, string.byte(key))
    end
    
    -- Appuyer sur toutes les touches simultanément
    for _, keyCode in ipairs(keyCodes) do
        vim:SendKeyEvent(true, keyCode, false, nil)
    end

    -- Relâcher toutes les touches simultanément après un court délai
    wait(delay / 2)
    for _, keyCode in ipairs(keyCodes) do
        vim:SendKeyEvent(false, keyCode, false, nil)
    end
end

local queue = ""  -- Queue pour stocker les touches entre crochets
local rem = true  -- Indicateur pour savoir si nous sommes à l'intérieur des crochets

for i = 1, #str do
    if shared.stop == true then return end

    local c = str:sub(i, i)
    
    if c == "[" then
        rem = false  -- Entrée dans les crochets
        continue
    elseif c == "]" then
        rem = true  -- Sortie des crochets
        if #queue > 0 then
            -- Envoyer toutes les touches dans la queue simultanément
            sendSimultaneousKeys(queue)
        end
        queue = ""  -- Réinitialiser la queue après l'envoi
        continue
    elseif c == " " or string.byte(c) == 10 then
        if shared.nospacedelay then continue end
        wait(delay)
        continue
    elseif c == "|" or c == "-" then
        wait(delay * 2)
        continue
    end
    
    -- Si nous sommes à l'intérieur des crochets, ajouter les caractères à la queue
    if not rem then
        queue = queue .. c
        continue
    end

    pcall(function()
        doshift(c)
        vim:SendKeyEvent(true, string.byte(c:lower()), false, nil)
        wait()
        vim:SendKeyEvent(false, string.byte(c:lower()), false, nil)
        endshift()
    end)
   
    wait(delay)
end
