shared.stop = true
wait(1)
shared.stop = false

local str = shared.scr or "qw[er]ty"
local FinishTime = shared.ftime or 150 -- Durée totale (~2 minutes et 30 secondes)

local vim = game:GetService("VirtualInputManager")

-- BPM initial
local bpm = 120

-- Fonction pour calculer le délai entre chaque touche
local function calculateDelay(bpm)
    return 60 / bpm
end

local shifting = false

local function doshift(key)
    if key:upper() ~= key then return end
    if tonumber(key) then return end

    vim:SendKeyEvent(true, 304, false, nil)
    shifting = true
end

local function endshift()
    if not shifting then return end

    vim:SendKeyEvent(false, 304, false, nil)
    shifting = false
end

local function pressKey(key, delay, isLong)
    doshift(key)
    vim:SendKeyEvent(true, string.byte(key:lower()), false, nil)
    if isLong then
        -- Note longue jouée en parallèle (attente indépendante)
        wait(delay * 1.5) -- Durée prolongée pour une note longue
    else
        wait(delay * 0.3) -- Note courte : durée normale
    end
    vim:SendKeyEvent(false, string.byte(key:lower()), false, nil)
    endshift()
end

local function pressMultipleKeys(keys, delay)
    for _, key in ipairs(keys) do
        doshift(key)
        vim:SendKeyEvent(true, string.byte(key:lower()), false, nil)
    end
    wait(delay * 0.3) -- Note courte pour plusieurs touches
    for _, key in ipairs(keys) do
        vim:SendKeyEvent(false, string.byte(key:lower()), false, nil)
        endshift()
    end
end

local bracketQueue = {}
local rem = true
local singleNoteMode = false -- Indique si une note seule a été trouvée après des crochets
local startTime = tick()

for i = 1, #str do
    if shared.stop == true then return end

    local c = str:sub(i, i)
    local delay = calculateDelay(bpm)

    if c == "[" then
        rem = false
        singleNoteMode = false -- Réinitialisation lors de nouveaux crochets
        continue
    elseif c == "]" then
        rem = true
        if #bracketQueue > 0 then
            pcall(function()
                pressMultipleKeys(bracketQueue, delay)
            end)
        end
        bracketQueue = {}
        singleNoteMode = true -- Prochaine note sera isolée si elle existe
        continue
    elseif c == " " or string.byte(c) == 10 then
        c = "|"
    end

    if c == "|" or c == "-" then
        wait(delay * 0.2) -- Intervalle court pour espaces
        continue
    end

    if not rem then
        table.insert(bracketQueue, c)
        continue
    end

    -- Si une note seule est détectée après crochets, elle est jouée longuement en parallèle
    if singleNoteMode then
        coroutine.wrap(function()
            pcall(function()
                pressKey(c, delay, true) -- True = Note longue
            end)
        end)()
        singleNoteMode = false -- Réinitialisation après la note isolée
    else
        -- Notes normales jouées immédiatement
        pcall(function()
            pressKey(c, delay, false) -- False = Note normale
        end)
    end
end
