shared.stop = true
wait(1)
shared.stop = false

shared.nospacedelay = shared.nospacedelay or false

local str = shared.scr or "qw[er]ty"
local FinishTime = shared.ftime or 10

local vim = game:GetService("VirtualInputManager")

local nstr = string.gsub(str, "[\\\n]", "")

local baseDelay = shared.tempo and (6 / shared.tempo) or shared.delay or FinishTime / (string.len(nstr) / 1.05)

local function humanDelay(factor, isBracket)
    local randomFactor = math.random(90, 110) / 100
    local dynamicFactor = 1 + (math.sin(tick() * 0.1) * 0.05)
    local delay = baseDelay * factor * randomFactor * dynamicFactor
    if isBracket then
        delay = delay * 2
    end
    return delay
end

local function pressKey(key, isBracket, maxHoldTime)
    wait(humanDelay(1, isBracket))

    if isBracket then
        vim:SendKeyEvent(true, string.byte(key:lower()), false, nil)
        wait(maxHoldTime)
        vim:SendKeyEvent(false, string.byte(key:lower()), false, nil)
    else
        vim:SendKeyEvent(true, string.byte(key:lower()), false, nil)
        wait(humanDelay(1, false))
        vim:SendKeyEvent(false, string.byte(key:lower()), false, nil)
    end
end

local rem = true
local bracketQueue = {}
local lastWasBracket = false
local bracketStartTime = nil

local maxHoldTime = 3

for i = 1, #str do
    if shared.stop == true then return end

    local c = str:sub(i, i)

    if c == "[" then
        rem = false
        lastWasBracket = true
        bracketStartTime = tick()
        continue
    elseif c == "]" then
        rem = true
        lastWasBracket = true
        if #bracketQueue > 0 then
            pcall(function()
                pressMultipleKeys(bracketQueue)
            end)
        end
        bracketQueue = {}
        continue
    elseif c == " " or string.byte(c) == 10 then
        c = "|"
    end

    if c == "|" or c == "-" then
        wait(humanDelay(2, false))
        continue
    end

    if lastWasBracket then
        if c == "[" or c == "]" then
            pcall(function()
                pressKey(c, false, 0)
            end)
        else
            pcall(function()
                pressKey(c, false, 0)
            end)
        end
        lastWasBracket = false
    else
        pcall(function()
            pressKey(c, false, 0)
        end)
    end

    if lastWasBracket and bracketStartTime and (tick() - bracketStartTime > maxHoldTime) then
        vim:SendKeyEvent(false, string.byte("["), false, nil)
        bracketStartTime = nil
    end
end
